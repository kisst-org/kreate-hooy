#####################################
# argparse module

init_module_argparse() {
    declare -gA aliases=()
    declare -ga parsed_args=()

    declare -g def_files=""
    declare -g envs=""
    declare -g to_dir=tmp/manifests
    declare -ga updates=()
    declare -gA command_help=()
    declare -g command=run_command_render

    add_command aliases "show all defined aliases"
}

add_command() {
    command_help["$1"]="${2:-no help sepcfied}"
}

replace_aliases() {
    for arg in "${@}"; do
        local al="${aliases[$arg]:-none}"
        if [[ "$al" != none ]]; then
            replaced=true
            parsed_args+=($al)
        else
            parsed_args+=("$arg")
        fi
    done
}

parse_options() {
    local replaced=false
    replace_aliases "${@}"
    set -- "${parsed_args[@]}"
    log_level=$log_level_info
    while [[ $# > 0 ]]; do
        arg=$1
        case $arg in
            -h|--help|help) show_help; exit 0;;
            --debug)        set -x;;
            -e|--env)       envs+=" $2";        shift;;
            -t|--to)        to_dir="$2";        shift;;
            -w|--with)      with_dir="$2";      shift;;
            -u|--update)    updates+=("\"$2\"");shift;;
            *)
                parse_result=0
                parse_args_logging "$@"
                if [[ "$parse_result" > 0 ]]; then
                    shift $(( "$parse_result" - 1))
                else
                    if [[ "${command_help["$arg"]:-none}" != none  ]]; then
                        command="run_command_$arg"
                    elif [[ -f ${arg} ]]; then def_files+=" ${arg}"
                    elif [[ -d ${arg} ]]; then def_files+=" ${arg}/*.def"
                    else
                        echo unknown argument ${arg}, should be a command, file or directory with one \*.def file
                        show_help
                        exit 1
                    fi
                fi
        esac
        shift
    done
    verbose COMMAND $(basename $0) ${parsed_args[@]}
    if [[ -z $envs ]]; then envs=${RENDER_DEFAULT_ENVS:-tst}; fi
    envs=${envs//,/ }  # split on comma
    # better test that also works with one or more spaces, might be:
    #   if [[ ${envs:-} =~ '^ *$' ]]; then ...
    # see https://unix.stackexchange.com/questions/146942/how-can-i-test-if-a-variable-is-empty-or-contains-only-spaces
}
