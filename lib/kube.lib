#####################################
# kube module

init_module_kube() {
    use_module argparse
    declare -Ag kubectl_options
    add_command kube-get "get current manifests from cluster to --to <path> (default) deployed/manifests"
    add_command kube-apply "apply rendered manifests with cluster (kubectl apply)"
    add_command kube-diff "compare rendered manifests with cluster (kubectl diff)"
}

run_command_kube-get() { forall-appenvs kube-get-manifests; }
run_command_kube-diff() { forall-appenvs update,render,kube-diff; }
run_command_kube-apply() { forall-appenvs update,render,kube-diff,kube-apply; }


run_action_kube-diff() {
    info kube-diff ${env} ${appname} to ${output_dir}
    if $(log_is_verbose); then
        verbose_cmd kubectl diff ${kubectl_options[$env]} -f $output_dir || true
    else
        verbose_cmd kubectl diff ${kubectl_options[$env]} -f $output_dir | grep -E '^[+-] |^---' || true
    fi
}

run_action_kube-apply() {
    info kube apply $output_dir
    verbose_cmd kubectl apply ${kubectl_options[$env]} -f $output_dir
}

split_kubectl_output_into_files() {
    yq  '.items.[]' -s \"$output_dir/\"'+ (.kind | downcase) + "_" + .metadata.name + ".yaml"'
}

run_action_kube-get-manifests() {
    info kube get manifests  ${env} ${appname} to ${output_dir}
    verbose_cmd rm -rf ${output_dir}
    verbose_cmd mkdir -p ${output_dir}
    local cmd="kubectl ${kubectl_options[$env]} -n "${namespace}" get deploy,svc,sts,cm,ingress -o yaml"
    verbose "    $cmd"
    $cmd | split_kubectl_output_into_files
    ignore_files=configmap_kube-root-ca.crt.yaml
    ignore_files+=" deployment_ingress-nginx-controller.yaml"
    ignore_files+=" service_ingress-nginx-controller-admission.yaml"
    ignore_files+=" service_ingress-nginx-controller.yaml"
    for f in ${ignore_files}; do
        rm -f "${output_dir}/$f"
    done
    for f in "${output_dir}"/*.yaml; do
         yq -i 'del(.metadata.annotations.["kubectl.kubernetes.io/last-applied-configuration"])' "${f}"
         yq -i 'del(.metadata.uid)' "${f}"
         yq -i 'del(.metadata.resourceVersion)' "${f}"
         yq -i 'del(.metadata.creationTimestamp)' "${f}"
    done
}
