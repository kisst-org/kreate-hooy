#####################################
# logging module

init_logging() {
    declare -gi log_level_fatal=0
    declare -gi log_level_error=10
    declare -gi log_level_warn=20
    declare -gi log_level_info=30
    declare -gi log_level_verbose=40
    declare -gi log_level_debug=50
    declare -gi log_level=$log_level_info
    declare -g  log_commands=false
    parse_loglevel "$@"
}

parse_args_logging() {
    case "$1" in
        -v|--verbose)   log_level=$log_level_verbose;  parse_result=1;;
        -q|--quiet)     log_level=$log_level_warn;     parse_result=1;;
        -s|--show-cmd)  log_commands=true;             parse_result=1;;
    esac
}

log_is_verbose() { (( ${log_level:-30} >= ${log_level_verbose:-40} )) }
log_is_info()    { (( $log_level >= $log_level_info )) }

verbose() { if $(log_is_verbose) ; then printf "## "; printf "%s " "${@}"; echo; fi }
info() {    if $(log_is_info) ;    then printf "# ";  printf "%s " "${@}"; echo; fi }
#info()    { if ${log_info:-true};     then echo "${@}"; fi }
verbose_cmd() {
    if (( $log_level >= $log_level_verbose )); then
        printf "    "; echo "${@}";
    elif $log_commands; then
        printf "    "; echo "${@}";
    fi
    cmd=$1; shift
    $cmd "${@}"
}

verbose_pipe() {
    pipe=$1
    shift
    if (( $log_level >= $log_level_verbose )); then
        printf "    "; echo "${@}" \| $pipe;
    elif $log_commands; then
        printf "    "; echo "${@}" \| $pipe;
    fi
    cmd=$1; shift
    $cmd "${@}" | $pipe
}


parse_loglevel() {
    for arg in "$@"; do
        parse_args_logging "${arg}" >/dev/null
    done
}
