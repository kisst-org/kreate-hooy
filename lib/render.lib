#####################################
# actions module

init_module_render() {
    use_module argparse
    add_command update "update source files with expressions from --update"
    add_command render "render manifests to --to <path> (default tmp/manifests)"
    add_command compare "render manifests to --to <path> (default tmp/manifests) and then compare with --with path (default deployed/manifests)"
}

run_command_update() { forall-appenvs update; }
run_command_render() { forall-appenvs render; }
run_command_compare() { forall-appenvs compare; }

run_action_update() {
    if [[ ${#updates[@]} == 0 ]]; then
        verbose skipping updates
        return 0
    fi
    info updating ${env} ${appname}
    for up in ${updates[@]}; do
        verbose applying update "$up"
        apply_update_$renderer "$up"
    done
}

run_action_render() {
    run_action_update

    info rendering  ${env} ${appname} to ${output_dir}
    $render_func
 }


run_action_compare() {
    run_action_render

    olddir=${output_dir}
    local newdir=${with_dir:-deployed/manifests}/${env}/${appname}
    info comparing ${env} ${appname}: ${output_dir} with ${newdir}

    if ${clean_before_compare:-true}; then
        verbose_cmd mkdir -p tmp/$(dirname $newdir)
        verbose_cmd cp -r $newdir tmp/$(dirname $newdir)
        newdir=tmp/${newdir}
        pre_diff_cleanup $newdir $olddir
    fi
    verbose_cmd diff -r $newdir $olddir || true
}

basic_cleanup () {
    verbose removing comments
    sed -i -e '/^ *#/d' $1/*.yaml $2/*.yaml
    verbose removing quotes around values starting or ennding with text
    sed -i -e 's/: "\([a-zA-Z].*\)"$/: \1/' $1/*.yaml $2/*.yaml
    sed -i -e 's/: "\([a-zA-Z0-9].*[a-zA-Z]\)"$/: \1/' $1/*.yaml $2/*.yaml
}

pre_diff_cleanup() {
    basic_cleanup $1 $2
}

split_into_files() {
    yq -s \"$output_dir/\"'+ (.kind | downcase) + "_" + .metadata.name + ".yaml"'
    rm -f ${output_dir}/_.yaml
}

#####################################
# run actions for all app/envs

forall-appenvs() {
    for def_file in $def_files; do
        for env in $envs; do
            run_actions "$@"
        done
    done
}
forall-envapps() {
    for env in $envs; do
        for f in $def_files; do
            run_actions "$@"
        done
    done
}

run_actions() {
    renderer=""
    skip=false
    action_list="$@"
    source ${def_file}
    init_renderer_${renderer}
    output_dir="${to_dir}/${env}/${appname}"
    if ${skip}; then
        info skipping $appname $env
        return 0
    fi
    for action in ${action_list//,/ }; do
        verbose running $action with ${output_dir} for ${env} ${appname}
        run_action_$action;
    done
}
